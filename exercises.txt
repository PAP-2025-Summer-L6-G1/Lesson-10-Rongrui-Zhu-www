Get Prepared
Local SSL files
    1. Copy these files from the Lesson 09 folder and paste them in the Lesson 10 folder:
    localhost-key.pem
    localhost.pem 

Backend
    2. Copy your .env file from the Lesson 09 backend folder, 
    paste it into the new backend folder
    Open a terminal from the backend folder, run this command:
    npm install

Frontend
    3. Copy your .env file from the Lesson 09 frontend folder, 
    paste it into the new frontend folder
    Open a terminal from the frontend folder, run this command:
    npm install

______________________________________________________
Exercise 1: Let's test!

    1. In the terminal pointed to the backend folder,run this command: 
    node index
    Start React
    2. Open the terminal pointed to the frontend folder, run this command: 
    npm start 
    3. Test the app, make sure all features are working. Once you've finished testing, kill the terminals to stop the app from running.

______________________________________________________
Exercise 2: Split the Repository

Remove existing Git
    1. Make sure you have permission to view hidden files on your computer
    Toggle the settings required by your Operating System
    Windows: Open File Explorer  from the taskbar. Select View > Show, then select Hidden items to view hidden files and folders.
    Mac: Open Finder. Press shift+command+period to show hidden files.

    2. Delete the existing .git file
    In File Explorer or Finder on your computer, in the pap-l6-lesson-10-student folder, find the.git file
    DELETE it.

    3. In VSCode, open a terminal from the lesson folder and run this command:
    git status
    Make sure your see a warning, "Fatal, not a git repositoryâ€¦"

Create a new frontend repo on Github
    4. Got to github.com, create a new repository, with a name like this:
    lesson10-yourname-www 
    Copy the repo git url

Initialize Git and connect to the new frontend repo
    5. In VSCode, open a terminal from the frontend folder.
    Enter this command:
    git init
    6. To connect to the new remote repo, run this command:
    git remote add origin paste-the-git-url
    7. Add, commit and push your frontend code to Github:
    git add .
    git commit -m"Split project repository frontend"
    git push origin main

Create a new backend repo on Github
    8. Got to github.com, create a new repository, with a name like this:
    lesson10-yourname-api 
    Copy the repo git url

Initialize Git and connect to the new backend repo
    9. In VSCode, open a terminal from the backend folder.
    Enter this command:
    git init
    10. To connect to the new remote repo, run this command:
    git remote add origin paste-the-git-url
    11. Add, commit and push your backend code to Github:
    git add .
    git commit -m"Split project repository frontend"
    git push origin main

Test!
    12. In the terminal pointed to the backend folder,run this command: 
    node index
    Start React
    13. Open the terminal pointed to the frontend folder, run this command: 
    npm start 
    14. Test the app, make sure all features are working.


______________________________________________________
Exercise 3: Set up Web Hosting on Netlify & Render

Create an account (if you don't have one already), and deploy the frontend on Netlify, a free web host for our frontend static website.

Part 1: Sign up for an account or login to Netlify 

If you have a Netlify account:
    Login to Netlify with Github
    Go to the "Sites" page
    Click "Add new site" -> "Import an existing project" -> 
    Let's deploy your project with: "Github"
    Proceed to follow the instructions in Part 2

If you don't have a Netlify account:

    1.1. Navigate to https://www.netlify.com/ on a web browser.
    1.2. Click the "Sign up" link/button.
    1.3. Click the "Sign up with GitHub" link/button.
    1.4. If it gives you a list of your existing GitHub accounts, select or continue with the GitHub account you created the repo with; otherwise, login with the GitHub account your created the repo with.
    1.5. Click the "Authorize netlify" link/button.
    1.6. If it asks for your profile information, fill out the fields (e.g., First Name, Last Name, School, School project, Student, skip the Team name) and click the "Continue to deploy" link/button.
    1.7. If it asks to deploy your first project, click the "GitHub" link/button; otherwise, from the main "Sites" page, click on the "Import from Git" link/button under "Import an existing project" section and then the "GitHub" link/button.
    1.8. Continue with the GitHub account associated with the created repo and if asked, authorize Netlify again and continue again.
    1.9. When asked to install repositories, select the "Only select repositories" option
    1.10. Search for the name of your frontend repo (e.g., lesson10-yourname-www) and click the repo found in the search results
    1.11. Click the "Install" link/button to connect the frontend repo to Netlify
    1.12. Provide your GitHub password to GitHub; so it can verify that you want to give Netlify access to the repo

Part 2: Deploy on Netlify

    2.1. Click to deploy our "lesson10-yourname-www" repo.
    2.2. Leave the Team as is, and write the following for the Site name: cfa-quarterYYYY-yourname-www (e.g., cfa-spring2025-johnsmith-www)
    2.3. Leave the branch to deploy as "main" since that is the branch with the code you want to deploy
    2.4. Do not add any Environment variables, since Netlify will handle deploying the React site over the HTTPS protocol.
    2.5. Leave the rest of the fields as is (e.g., blank Base directory, Build command: npm run build, Publish directory: build, blank Functions directory)
    2.6. Click the "Deploy cfa-quarterYYYY-yourstudentname-www" link/button to deploy your frontend repo to the web.
    2.7. Copy the web link for your frontend deployment and save it for later, for example: https://cfa-spring2025-johnsmith-www.netlify.app


Part 3: Set up Render

Creat an account and deploy the backend on Render, a free web host for our backend web service.

    3.1. Navigate to https://www.render.com/ on a web browser.
    3.2. Click on the "Get Started" or sign up link/button.
    3.3. Click on the "GitHub" link/button under the "Create an account" heading.
    3.4. If it gives you a list of your existing GitHub accounts, select or continue with the GitHub account you created the repo with; otherwise, login with the GitHub account you created the repo with.
    3.5. Click the "Authorize Render" link/button.
    3.6. If it asks for you to confirm your email, *** MAKE SURE you input the email address associated with the GitHub account you're linking ***, and click the "Create Account" link/button.
    3.7. Login to your associated email address and click the verification link.
    3.8. If it asks for your profile information, fill out the fields (e.g., your name, For school, API / Mobile backend, Other -> GitHub) and click the "Continue to Render" link/button.
    3.9. Click on the "New Web Service ->" link/button under the "Web Services" heading.
    3.10. Click on the "GitHub" link/button under the "Connect Git provider" heading.
    3.11. Sign into GitHub using the account associated with the backend repo to give Render permission to use it.
    3.12. When asked to install repositories, select the "Only select repositories" option
    3.13. Search for the name of your backend repo (e.g., lesson10-yourname-api) and click the repo found in the search results
    3.14. Click the "Install" link/button to connect the backend repo to Render.

Part 4: Deploy on Render 

Now that our backend repo is linked to Render, we can have Render host our backend API.
    4.1. To provide our source code, click on the repo you gave access for (e.g. yourgithubname/lesson10-yourstudentname-api), and then click the "Connect ->" link/button.
    4.2. For the Name, write out the following: cfa-quarterYYYY-yourname-api (e.g., cfa-spring2025-johnsmith-api)
    4.3. Leave the branch as "main" since that branch has the code we want to deploy to the web.
    4.4. For the Build Command, replace the existing with: npm install
    4.5. For the Start Command, replace the existing with: node index.js
    4.6. Leave the other fields as is (e.g., Project, Node, Oregon (US West), blank Root Directory, blank Dockerfile Path)
    4.7. Select the "Free" option next to the "For hobby projects" heading.
    4.8. Next to the "Environment Variables", click "Add"
    4.9. Open the ".env" file from your "backend" folder, copy and paste all the variables EXCEPT PORT. Render will assign a port.
    4.10. Click the "Deploy Web Services" link/button.
    4.11. Copy the web link for your backend deployment and save it for later, for example: https://cfa-spring2025-johnsmith-api.onrender.com

Allow Render to access MongoDB 
    4.12 Visit your Render account. Go to "Events"
        Click the "Connect" button
        Copy the static IP addresses
    4.13 Login in to your Mongodb account
        Click on "Network access"
        Add the IP addresses from Render

______________________________________________________
Exercise 4: Edit code to allow for both development testing and production use

We want to make our frontend and backend able to be tested locally and run deployed on the web with the same repo code. To do this, we'll need to make some additions and adjustments to the host URL used by our fetch calls on the frontend and to the logic that starts our backend.

Let's update the frontend code to connect to our web-hosted API when we're running on Netlify, and connect to our locally-hosted API when we're not.

    1. Inside App.js, we need to use a ternary conditional operator to check if we're running in a production environment (accessible by our target audience) or if we're running in our local environments: (only accessible by our developers). While setting the hostURL, check if process.env.NODE_ENV is equal to "production".
    2. If it is equal to "production", then set hostURL to equal the link we copied for our "backend" host (e.g., https://cfa-spring2025-johnsmith-api.onrender.com).
    3. If it is not equal to "production", then set hostURL to equal our original secure localhost link (e.g., https://localhost:3002).

    NOTE: Static websites don't usually have access to process.env variables in JavaScript; however, React replaces this environment variable check during its build process. Other build frameworks will do the same thing (e.v., webpack, etc.). 

Let's update the backend code to run our API normally when we're running on Render, and run our API over secure localhost when we're not.

    4. Inside index.js, we need to use an if condition to check if we're running in a production environment (accessible by our frontend static website). Check if process.env.NODE_ENV is equal to "production".
    5. If it is equal to "production", uncomment the original app.listen() function call and run it here in this case. Render will handle running the API over HTTPS for us.
    6. If it is not equal to "production", then place our httpsOptions and https.createServer() call in the else case.

    7. There is one other change we need to make on the backend. We need to update our "cors" middleware to accept our frontend host URL as an origin, but we also want to keep our secure localhost as an origin too. To do this, we need to change the "origin" key's value to be an array. The first value in the array can be our secure localhost URL. Our second value in the array should be the link we copied to our web-hosted frontend static website on Netlify, for example: https://cfa-spring2025-johnsmith-www.netlify.app

Let's test!
    8. Start the server. Start React. Test all features on localhost.

    9. If your app is working properly, add commit and push your changes to both repos on Github.
    
    10. On render.com, click into your deployed repo. The "Events" tab will show you if your latest commit has been deployed live yet or not and at what time it was deployed.
    If render.com hasn't redeployed yet, you can manually do this by clicking the "Manual deploy" link/button and selecting "Deploy latest commit".
    
    11. On netlify.com, click into your deployed repo. The "Production deploys" section will tell you if your "main" branch is published yet or not and at what time it was published.
    If netlify.com hasn't republished yet, you can manually do this by clicking on the "main" branch under "Production deploys" and then clicking "Options" dropdown and selecting "Retry with latest branch commit".

    12. Naigate to your app's frontend URL, for example: https://cfa-spring2025-johnsmith-www.netlify.app
    Test your app, does it work? Woohoo Congratulations!

Troubleshooting
If your app isn't working visit your Render account. Go to the "Logs" page. 
You can see the output of your error handling code, and any server messages,
just like you would locally in the terminal.

______________________________________________________
Practice Session 

Figure out a way to gracefully deploy this app to the services we used today, so that when we first launch, there are no errors. Hint: we don't have to deploy the whole app.